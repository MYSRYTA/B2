//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
BoolAttributeT<T>::BoolAttributeT ( const String &_name, u32 count ){
	if ( _name == "" ) {
		return;
	}
	this->setValid ( true );
	this->setName ( _name );
	this->setType ( Burgess2AttrType::BoolAttr );
	this->values.resize ( count );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュートの配列数を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
u32 BoolAttributeT<T>::size () const {
	return this->values.size ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュートの配列数を変更する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
void BoolAttributeT<T>::resize ( u32 count ) {
	this->values.resize ( count );
	this->values.shrink_to_fit ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュート値を新しい配列に設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
void BoolAttributeT<T>::resetValues ( const std::vector<Bool> &_values ) {
	this->values = std::move(_values);
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     全てのアトリビュート値を設定（配列数の変更は無し）する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
void BoolAttributeT<T>::setValues ( const std::vector<Bool> &_values ) {
	if (this->size() != _values.size()) { return; }
	this->values = std::move(_values);
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュート値を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
void BoolAttributeT<T>::setValue ( u32 index, Bool value ) {
	assert ( index < this->size () );
	this->values [index] = value;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュート値を参照で返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
std::vector<Bool>& BoolAttributeT<T>::getValuesRef () {
	return this->values;
}


//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュート値を全て取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
std::vector<Bool> BoolAttributeT<T>::getValues () const {
	return this->values;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュート値を取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
Bool BoolAttributeT<T>::getValue (u32 index) const{
	assert ( index < this->size () );
	return this->values [index];
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     値を全てfalseにする
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
void BoolAttributeT<T>::clear ()  {
	u32 cnt = this->values.size ();
	for ( u32 i = 0; i<cnt; i++ ) {
		this->values [i] = false;
	}
}