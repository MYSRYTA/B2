//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    デフォルトコンストラクタ　（基本アトリビュートを作成）
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
CurveDataT<T>::CurveDataT () {
	this->attr.getOrCreatVec3Attribute ( "pointPositions" );
	this->attr.getOrCreatVec3Attribute ( "normals" );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    カーブのフォームを設定する CurveData::CurveFrom ::Open=0,  ::Close=1, ::Periodic=2
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
void CurveDataT<T>::setForm ( u8 _form ) {
	this->form = _form;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    カーブのサンプリング数を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
void CurveDataT<T>::setSample ( u8 _sample ) {
	this->sample = _sample;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    カーブのフォームを取得する　0=open, 1=close, 2=periodic
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
u8 CurveDataT<T>::getForm () const {
	return this->form;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    カーブのサンプリング数を取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
u8 CurveDataT<T>::getSample () const {
	return this->sample;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		Attribute"paramLengthTable"を更新すべき場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool CurveDataT<T>::paramLengthTableIsDirty ( ) const {
	assert ( this->attr.has("paramLengthTable") );
	return this->paramLengthTableVirsion.x() > this->paramLengthTableVirsion.y();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		Attribute"paramLengthTable"が最新の状態になったことを記録する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveDataT<T>::paramLengthTableCached ( ) {
	assert ( this->attr.has ( "paramLengthTable" ) );
	this->paramLengthTableVirsion.y() = this->paramLengthTableVirsion.x();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		Attribute"paramLengthTable"の更新を促す状態にする
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveDataT<T>::incrementParamLengthTableVirsion ( ) {
	assert ( this->attr.has ( "paramLengthTable" ) );
	this->paramLengthTableVirsion.x()++;
}
