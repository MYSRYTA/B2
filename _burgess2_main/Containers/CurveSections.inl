//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
CurveSectionsT<T>::CurveSectionsT ( const std::vector<Vec2T<T>> &val )
	: values ( val )
	, dirty ( true )
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
CurveSectionsT<T>::CurveSectionsT ( u32 size ) {
	this->values.resize ( size ); 
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionを追加する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
u32 CurveSectionsT<T>::add ( const Vec2T<T> &v ) { 
	this->values.push_back ( v );
	this->setDirty ();
	return this->values.size () -1;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionを追加する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
u32 CurveSectionsT<T>::add ( T start, T end ) {
	return this->add ( Vec2T<T> ( start, end ) );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionの値を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveSectionsT<T>::setValue ( u32 sectionID, Vec2T<T> v ) {
	assert ( sectionID < this->sectionCount () );
	this->values [sectionID] = v;
	this->setDirty ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionの値を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveSectionsT<T>::setValue ( u32 sectionID, T start, T end ) {
	assert ( sectionID < this->sectionCount () );
	this->values [sectionID] = Vec2T<T> ( start, end );
	this->setDirty ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     全てのsectionの値を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveSectionsT<T>::setAllValues ( const std::vector<Vec2T<T>> &v ) {
	assert ( v.size() == this->sectionCount () );
	this->values = v;
	this->setDirty ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     全てのsectionの配列数と値を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveSectionsT<T>::resetAllValues ( const std::vector<Vec2T<T>> &v ) {
	this->values = v;
	this->setDirty ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     indexを設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveSectionsT<T>::setIndex ( u32 _index ) {
	this->index = _index;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionの値を取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> CurveSectionsT<T>::getValue ( u32 sectionID ) const{
	assert ( sectionID < this->sectionCount () );
	return this->values [sectionID];
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     全てのsectionの値を取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
std::vector<Vec2T<T>> CurveSectionsT<T>::getAllValues () const {
	return this->values;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionのスタート値を取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T CurveSectionsT<T>::getStart ( u32 sectionID ) const {
	assert ( sectionID < this->sectionCount () );
	return this->values [sectionID].x;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionのセンター値を取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T CurveSectionsT<T>::getCenter ( u32 sectionID ) const { 
	assert ( sectionID < this->sectionCount () );
	return ( this->values [sectionID].x + this->values [sectionID].y ) * 0.5f;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionのエンド値を取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T CurveSectionsT<T>::getEnd ( u32 sectionID ) const { 
	assert ( sectionID < this->sectionCount () );
	return this->values [sectionID].y;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionのLengthRatioを取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T CurveSectionsT<T>::getLengthRatio ( u32 sectionID ) const {
	assert ( sectionID < this->sectionCount () );
	T start = this->getStart ( sectionID );
	T end = this->getEnd ( sectionID );
	return end - start;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     indexを取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
u32 CurveSectionsT<T>::getIndex () const{
	return this->index;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionの数を0にする
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveSectionsT<T>::clear (){
	this->resize ( 0 );
	this->values.shrink_to_fit ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionの数を再設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveSectionsT<T>::resize ( u32 size ) {
	this->values.resize ( size );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionの数を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
u32 CurveSectionsT<T>::sectionCount ()const {
	return this->values.size ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionを複製する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveSectionsT<T>::duplicate ( u32 sectionID ) {
	this->copySectionFrom ( *this, sectionID );
	this->setDirty ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     CurveSectionsをコピーする
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveSectionsT<T>::copyFrom ( const CurveSectionsT<T> &source ) {
	this->resetAllValues ( source.getAllValues () );
	this->setIndex ( source.getIndex () );
	this->setDirty ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     sectionをコピーする
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveSectionsT<T>::copySectionFrom ( const CurveSectionsT<T> &source, u32 sectionID ){
	if ( source.sectionCount () ==0 ) { return; }
	assert ( sectionID < source.sectionCount () );
	this->add ( source.getValue ( sectionID ) );
	this->setDirty ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     不正な値のセクションを削除する
//!
//!		例：[0.0, 0.0] や [0.4, 0.1]といったセクション情報があった場合は削除
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveSectionsT<T>::cleanup () {
	if ( this->dirty == false ) { return; }

	u32 resetSize = 0;
	for ( u32 i = 0; i < this->sectionCount (); i++ ) {
		if ( this->getStart ( i ) < this->getEnd ( i ) ) {
			resetSize++;
		}
	}
	if ( resetSize == this->sectionCount () ) { return; }

	CurveSectionsT<T> rest = *this;
	this->resize ( resetSize );
	u32 k = 0;
	for ( u32 i = 0; i < rest.sectionCount (); i++ ) {
		if ( rest.getStart ( i ) < rest.getEnd ( i ) ) {
			this->values [k] = rest.getValue ( i );
			k++;
		}
	}
	this->dirty = false;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     cleanupを促す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void CurveSectionsT<T>::setDirty () {
	this->dirty = true;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    cleanup()を実行後、このデータが有効な場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool CurveSectionsT<T>::isValid () {
	this->cleanup ();
	return 0 < this->values.size ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    origRatioをセクション範囲にリスケールする
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T CurveSectionsT<T>::changeRange ( u32 sectionID, T origRatio ) const {
	T r = this->getLengthRatio ( sectionID );
	return origRatio * r + this->getStart ( sectionID );
}