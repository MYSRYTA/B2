//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Ray3T<T>::Ray3T( const Vec3T<T>& start, const Vec3T<T>& directionUnitVector )
	: start{ start }
	, direction{ directionUnitVector }
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Rayが同じ値の場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Ray3T<T>::equal( const Ray3T& other ) const{
	return this->start == other.start && this->direction == other.direction;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Rayが誤差許容範囲内で同じ値の場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Ray3T<T>::almostEqual( const Ray3T& other, T tolerance ) const{
	return	this->start.almostEqual( other.start, tolerance ) &&
			this->direction.almostEqual( other.direction, tolerance );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     デバッグ用の文字列にする　"データ型：[ 値 ]"
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
String Ray3T<T>::toString( const String title ) const{
	String start = "start Vec3:[" + GetFloorString( this->start.x() ) + ", " + GetFloorString( this->start.y() ) + ", " + GetFloorString( this->start.z() ) + "]";
	String dir = "/ direction Vec3:[" + GetFloorString( this->direction.x() ) + ", " + GetFloorString( this->direction.y() ) + ", " + GetFloorString( this->direction.z() ) + "]";
	String t = title;
	if(title.length() != 0) { t += " : "; }
	return t + "Ray3:[" + start + dir + "]";
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     スタート位置と向きを設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Ray3T<T>::setFromStartPositionAndDirection( const Vec3T<T>& start, const Vec3T<T>& directionUnitVector ){
	this->start = start;
	this->direction = directionUnitVector;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     スタート位置とターゲット位置からRayを設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Ray3T<T>::setFromStartAndTargetPosition( const Vec3T<T>& start, const Vec3T<T>& target ){
	this->start = start;
	this->direction = ( target - start ).unit();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     スタート地点から指定距離離れたRay上の点を取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec3T<T> Ray3T<T>::getPositionOnRay( T distance ) const{
	return this->start + this->direction * distance;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Rayのスタート地点を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec3T<T> Ray3T<T>::getStartPosition() const{
	return this->start;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Rayの向きを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec3T<T> Ray3T<T>::getDirection() const{
	return this->direction;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Ray3T<T>::operator == ( const Ray3T& other ) const{
	return this->start == other.start && this->direction == other.direction;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Ray3T<T>::operator != ( const Ray3T& other ) const{
	return this->start != other.start || this->direction != other.direction;
}
