//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     デフォルトコンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Ray3T<T>::Ray3T ()
	: start { Vec3T<T> {T ( 0.0 )} }
	, direction { Vec3T<T> {0.0,0.0,1.0} } 
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Ray3T<T>::Ray3T ( const Vec3T<T> &start, const Vec3T<T> &direction )
	: start { start }
	, direction { direction } 
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//!		@param[in] vec3IsDir 第２引数のvec3の扱い方 : true=direction, false=targetPosition
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Ray3T<T>::Ray3T ( const Vec3T<T> &start, const Vec3T<T> &vec3, Bool vec3IsDir ) 
	: start { start } {
	Vec3T<T> rest = vec3;
	this->direction = vec3IsDir? vec3 : ( vec3 - this->start ).unit ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Rayのスタート地点を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Ray3T<T>::setStartPosition ( Vec3T<T> start ) {
	this->start = start;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Rayの向きを設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Ray3T<T>::setDirection ( Vec3T<T> direction ) {
	assert ( Math::AlmostEqual ( direction.length (), T ( 0.0 ) ) == false );
	this->direction = direction.unit ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Rayの通過点を指定して向きを設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Ray3T<T>::setTargetPosition ( Vec3T<T> target ) {
	assert ( Math::AlmostEqual ( ( target - this->start ).length (), T ( 0.0 ) ) == false );
	this->direction = ( target - this->start ).unit ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     スタート地点から指定距離離れたRay上の点を取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec3T<T> Ray3T<T>::getPositionOnRay ( T distance ) const {
	return this->start + this->direction * distance;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Rayのスタート地点を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec3T<T> Ray3T<T>::getStartPosition () const {
	return this->start;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Rayの向きを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec3T<T> Ray3T<T>::getDirection () const {
	return this->direction;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     デバッグ用の文字列にする　"データ型：[ 値 ]"
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
String Ray3T<T>::toString ( const String title ) const {
	String start = "start Vec3:[" + GetFloorString ( this->start.x ) + ", " + GetFloorString ( this->start.y ) + ", " + GetFloorString ( this->start.z ) + "]";
	String dir = "/ direction Vec3:[" + GetFloorString ( this->direction.x ) + ", " + GetFloorString ( this->direction.y ) + ", " + GetFloorString ( this->direction.z ) + "]";
	String t = title;
	if ( title.length () != 0 ) { t += " : "; }
	return t + "Ray3:[" + start + dir +"]";
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     トランスフォーム
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Ray3T<T>::transform ( const Mat4T<T> &transformVal ) {
	Vec3T<T> target = this->start + this->direction;
	this->start = transformVal * this->start;
	target = transformVal * target;
	this->direction = ( target - this->start ).unit ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     トランスフォーム
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Ray3T<T>::transform ( const XfoT<T> &transformVal ) {
	Mat4T<T> m4 = transformVal.toMat4 ();
	this->transform ( m4 );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Ray3T<T>::operator == ( const Ray3T &other ) const {
	return this->start == other.start && this->direction == other.direction;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Ray3T<T>::operator != ( const Ray3T &other ) const {
	return this->start != other.start || this->direction != other.direction;
}