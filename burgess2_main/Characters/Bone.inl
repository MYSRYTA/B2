
//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
BoneT<T>::BoneT () 
	: name { "_" }
	, parentID { s32( -1 ) }
	, mirrorID { s32 ( -1 ) }
{
	this->setIdentity ();
	this->neutralPose.setIdentity ();
	this->invNeutralPose.setIdentity ();
};

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Boneのセットアップ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void BoneT<T>::set ( const String &_name, const XfoT<T> &_globalNeutralPose, s32 _parentBoneID ) {
	this->name = _name;
	this->parentID = _parentBoneID;
	this->gNeutralPose = _globalNeutralPose;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Boneの子供ボーンのID群を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void BoneT<T>::setChildBoneIDs ( const std::vector<u32> childBoneIDs ) {
	this->childIDs = childBoneIDs;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Boneの子供ボーンのIDを追加する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void BoneT<T>::pushChildBoneID ( u32 childBoneID ) {
	this->childIDs.push_back( childBoneID );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     BoneのミラーボーンのIDを設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void BoneT<T>::setMirrorBoneID ( u32 mirrorBoneID ) {
	this->mirrorID = mirrorBoneID;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Boneのニュートラルポーズ(ロカール)を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void BoneT<T>::setLocalNeutralPose ( const XfoT<T> &localNeutralPose ) {
	this->neutralPose = localNeutralPose;
	this->invNeutralPose = localNeutralPose.toMat4 ().inverse ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Boneの子供ボーンのIDを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
std::vector<u32> BoneT<T>::getChildBoneIDs ( ) const{
	return this->childIDs;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     BoneのミラーボーンのIDを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
u32 BoneT<T>::getMirrorBoneID ()const {
	return this->mirrorID;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     親ボーンのIDを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
s32 BoneT<T>::getParentBoneID ()const{
	return this->parentID;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Boneのニュートラルポーズ(ロカール)を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> BoneT<T>::getLocalNeutralPose () const {
	return this->neutralPose;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Boneのニュートラルポーズ(グローバル)のインバースMat4を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Mat4T<T> BoneT<T>::getInvLocalNeutralPose () const{
	return this->invNeutralPose;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Boneのニュートラルポーズ(グローバル)を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> BoneT<T>::getGlobalNeutralPose () const {
	return this->gNeutralPose;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Boneのニュートラルポーズ(グローバル)のインバースMat4を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Mat4T<T> BoneT<T>::getInvGlobalNeutralPose () const{
	return Mat4T<T> ( this->gNeutralPose ).inverse ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Boneにミラーボーンが設定されている場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool BoneT<T>::hasMirrorBone () const {
	return this->mirrorID != s32 ( -1 );
}