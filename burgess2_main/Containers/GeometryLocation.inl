//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
GeometryLocationT<T>::GeometryLocationT ( u32 _index, Vec3T<T> _weight, u8 _type )
	: index { _index }
	, subIndex { -1 }
	, weight { _weight }
	, geoType { _type } 
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
GeometryLocationT<T>::GeometryLocationT ( u32 _index, s8 _subIndex, Vec3T<T> _weight, u8 _type )
	: index { _index }
	, subIndex { _subIndex }
	, weight { _weight }
	, geoType { _type } 
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     GeometryLocationを構成する各データを設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void GeometryLocationT<T>::setValues ( u32 _index, s8 _subIndex, const Vec3T<T> &_weight, u8 _type ) {
	this->index = _index ;
	this->subIndex = _subIndex ;
	this->weight = _weight ;
	this->geoType = _type ;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void GeometryLocationT<T>::resetIndex ( u32 _index ){
	assert ( this->isValid () );
	this->index = _index;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void GeometryLocationT<T>::resetSubIndex ( s8 _subIndex ){
	assert ( this->isValid () );
	this->subIndex = _subIndex;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void GeometryLocationT<T>::resetWeight ( const Vec3T<T> &_weight ){
	assert ( this->isValid () );
	this->weight = _weight;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool GeometryLocationT<T>::almostEqual( const GeometryLocationT<T>& other, T tolerance ) const{
	if ( this->index != other.index ){ return false; }
	if ( this->subIndex != other.subIndex ){ return false; }
	if ( this->geoType != other.geoType ){ return false; }
	return this->weight.almostEqual( other.weight, tolerance );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    Geometryタイプを取得する
//!		
//!		1 = Points <br>
//!		2 = Curves <br>
//!		3 = PolygonMesh
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
u8 GeometryLocationT<T>::getType () const {
	return this->geoType;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     ロケーションのIDを返す(Geometryタイプごとに意味が異なる)
//!		
//!		Points : PointID <br>
//!		Curves : CurveID <br>
//!		PolygonMesh : PolygonID
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
u32 GeometryLocationT<T>::getIndex () const { 
	return this->index; 
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     PolygonTiangleIDを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
u8 GeometryLocationT<T>::getSubIndex () const {
	return this->subIndex;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     ウェイト値を返す(Geometryタイプごとに意味が異なる)
//!		
//!		Points : .x = 1.0 <br>
//!		Curves : .x = lengthRatio<br>
//!		PolygonMesh : .xyz = PolygonTiangleの各頂点への相対的ウェイト値
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec3T<T> GeometryLocationT<T>::getWeight () const {
	return this->weight;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     lengthRatioを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T GeometryLocationT<T>::getCurveLengthRatio () const {
	return this->weight.x;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     このデータが有効な場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool GeometryLocationT<T>::isValid () const {
	return this->geoType != 0;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     デバッグ用の文字列にする　"データ型：[ 値 ]"
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
String GeometryLocationT<T>::toString( const String title ) const {
	String t = title;
	if ( title.length() != 0 ) { t += " : "; }
	if ( this->isValid() == false ) {
		return t + "GeometryLocation:[ !!!!! not valid ]";
	}
	String geoTypeStr;
	switch ( this->geoType ) {
	case 1:
		geoTypeStr = "Points";
		break;
	case 2:
		geoTypeStr = "Curves";
		break;
	case 3:
		geoTypeStr = "PolygonMesh";
		break;
	case 0:
	default:
		return t + "GeometryLocation:[ !!!!! not valid ]";
	}
	String weightStr = "[" + GetFloorString( this->weight.x() ) + ", " + GetFloorString( this->weight.y() ) + ", " + GetFloorString( this->weight.z() ) + "]";
	return t + "GeometryLocation:[GeometryType=" + geoTypeStr + ", index=" + std::to_string(this->index) + ", subIndex=" + std::to_string(this->subIndex) + ", weight=" + weightStr + "]";
}