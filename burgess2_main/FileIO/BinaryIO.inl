//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     イニシャライザー　（_pathには拡張子.binも含める）
//------------------------------------------------------------------------------------------------------------------------------------------------
template <class C>
BinaryIO<C>::BinaryIO ( const String &_path ) 
	: path { _path }
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     バイナリファイルへのパスを設定する （拡張子.binも含める）
//------------------------------------------------------------------------------------------------------------------------------------------------
template <class C>
void BinaryIO<C>::setPath ( const String &_path ){
	this->path = _path;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     バイナリファイルの書き込み(上書き)可能な状態にする
//------------------------------------------------------------------------------------------------------------------------------------------------
template <class C>
Bool BinaryIO<C>::setWritable ( ) {
	this->close ();
	const char* outfile = this->path.c_str ();
	this->fout.open ( outfile, std::ios::out );
	if ( this->fout ) {
		this->mode = 1;
		return true;
	} else {
		this->mode = 0;
		return false;
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     バイナリファイルの読み込み可能な状態にする
//------------------------------------------------------------------------------------------------------------------------------------------------
template <class C>
Bool BinaryIO<C>::setReadable () {
	this->close ();
	const char* outfile = this->path.c_str ();
	this->fin.open ( outfile, std::ios::in );
	if ( this->fin ) {
		this->mode = 2;
		return true;
	} else {
		this->mode = 0;
		return false;
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     書き込み / 読み込み状態を終了する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <class C>
void BinaryIO<C>::close () {
	if ( this->mode == 1 ){ this->fout.close (); }
	if ( this->mode == 2 ){ this->fin.close (); }
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     クラスデータの書き込み (事前にsetWritable()を実行していない場合は無効)
//------------------------------------------------------------------------------------------------------------------------------------------------
template <class C>
void BinaryIO<C>::write ( const C &val )  {
	if ( this->mode != 1 ) { return; }
	//出力時の受け皿
	std::stringstream stream;
	{
		//出力用の型に文字列streamを登録
		cereal::BinaryOutputArchive binOutArchive ( stream );
		//文字列ストリームにbinを投げつけてもらう
		binOutArchive ( cereal::make_nvp ( "BinIO", val ) );
	}
	//書き出す
	this->fout << stream.str ();
	//閉じる
	this->fout.close ();
	stream.clear ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     クラスデータの読み込み (事前にsetReadable()を実行していない場合は無効)
//------------------------------------------------------------------------------------------------------------------------------------------------
template <class C>
void BinaryIO<C>::read ( OUT C &val )  {
	if ( this->mode != 2 ) { return; }
	//入力される文字列受け皿
	std::stringstream stream;
	//入力データを全部文字列streamに投げる
	stream << this->fin.rdbuf ();
	{
		//binをロード
		cereal::BinaryInputArchive binInputArchive ( stream );
		//デコードしたデータをセット
		binInputArchive ( cereal::make_nvp ( "BinIO", val ) );
	}
}