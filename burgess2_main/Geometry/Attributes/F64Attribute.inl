//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
F64AttributeT<T>::F64AttributeT ( const String &_name, u32 count ){
	if ( _name == "" ) {
		return;
	}
	this->setValid ( true );
	this->setName ( _name );
	this->setType ( Burgess2AttrType::F64Attr );
	this->values.resize ( count );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュートの配列数を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
u32 F64AttributeT<T>::size () const {
	return u32(this->values.size ());
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュートの配列数を変更する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
void F64AttributeT<T>::resize ( u32 count ) {
	this->values.resize ( count );
	this->values.shrink_to_fit ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュート値を新しい配列に設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
void F64AttributeT<T>::resetValues ( const std::vector<T> &_values ) {
	this->values = std::move(_values);
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    全てのアトリビュート値を設定（配列数の変更は無し）する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
void F64AttributeT<T>::setValues ( const std::vector<T> &_values ) {
	if (this->size() != _values.size()) { return; }
	this->values = std::move(_values);
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュート値を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
void F64AttributeT<T>::setValue ( u32 index, T value ) {
	assert ( index < this->size () );
	this->values [index] = value;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュート値を参照で返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
std::vector<T>& F64AttributeT<T>::getValuesRef () {
	return this->values;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュート値を全て取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
std::vector<T> F64AttributeT<T>::getValues () const {
	return this->values;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュート値を取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
T F64AttributeT<T>::getValue (u32 index) const{
	assert ( index < this->size () );
	return this->values [index];
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    アトリビュート値へ[ ]でアクセスする
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
T& F64AttributeT<T>::operator[]( u32 index ) {
	assert ( index < this->size () );
	return this->values [index];
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     アトリビュート値へ[ ]でアクセスする
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
const T& F64AttributeT<T>::operator[]( u32 index ) const {
	assert ( index < this->size () );
	return this->values [index];
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     値を全て0.0にする
//------------------------------------------------------------------------------------------------------------------------------------------------
template<typename T>
void F64AttributeT<T>::clear () {
	u32 cnt = this->values.size ();
	for ( u32 i = 0; i<cnt; i++ ) {
		this->values [i] = T(0.0);
	}
}