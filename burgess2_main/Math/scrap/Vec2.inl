
//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     デフォルトコンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T>::Vec2T () 
	: x { T(0.0) }
	, y { T(0.0) }
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T>::Vec2T( T val ) 
	: x { val }
	, y { val } 
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T>::Vec2T( T setX, T setY ) 
	: x { setX }
	, y { setY }
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T>::Vec2T ( const VecT<T> &val ) {
	assert ( 2 <= val.size() );
	*this = { val [0], val [1] };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T>::Vec2T ( const std::vector<T> &val ) {
	assert ( 2 <= val.size () );
	*this = { val [0], val [1] };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		.x .yごとに最小値で構成したベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::getMin ( const Vec2T& other ) const {
	return Vec2T { Math::Min ( this->x, other.x ), Math::Min ( this->y, other.y ) };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		.x .yごとに最大値で構成したベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::getMax( const Vec2T& other ) const {
	return Vec2T { Math::Max ( this->x, other.x ), Math::Max ( this->y, other.y ) };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     .x .yごとにlimitの範囲に制限したベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::clamp( const Vec2T& limitVal0, const Vec2T& limitVal1 ) const {
	Vec2T<T> min = limitVal0.getMin ( limitVal1 );
	Vec2T<T> max = limitVal0.getMax ( limitVal1 );

	Vec2T result;
	result.x = Math::Clamp ( this->x, min.x, max.x );
	result.y = Math::Clamp ( this->y, min.y, max.y );
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     t値(0.0~1.0)に基づいて対象ベクトルと線形補間したベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::lerp( const Vec2T& other, T t ) const {
	return *this + ( ( other - *this ) * t );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     t値(0.0~1.0)に基づいて対象ベクトルと球面線形補間したベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::slerp ( const Vec2T& other, T t ) const{
	if ( this->almostEqual ( other ) ){ return *this; }

	Vec2T<T> v = Math::AlmostEqual ( this->lengthSquared (), T ( 1.0 ) ) ? *this : this->unit ();
	Vec2T<T> o = Math::AlmostEqual ( other.lengthSquared (), T ( 1.0 ) ) ? other : other.unit ();
	T d = v.dot ( o );
	T angle = std::acos ( d );
	T sinTh = std::sin ( angle );

	T s = std::sin ( angle * ( T ( 1.0 ) - t ) );
	T e = std::sin ( angle * t );
	Vec2T<T> r = ( ( s * v ) + ( e * o ) ) / sinTh;
	return r.unit ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     t値(0.0~1.0)に基づいて対象ベクトルと線形補間したベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::linearInterpolate ( const Vec2T& other, T t ) const {
	return this->lerp ( other, t );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     t値(0.0~1.0)に基づいて対象ベクトルと球面線形補間したベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::sphericalLinearInterpolate ( const Vec2T& other, T t ) const{
	return this->slerp ( other, t );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     ベクトルの長さを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T Vec2T<T>::length() const {
	return std::sqrt ( this->lengthSquared () );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2乗を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T Vec2T<T>::lengthSquared () const {
	return this->dot ( *this );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     単位ベクトルにする
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Vec2T<T>::setNormal () {
	assert ( Math::IsZero ( this->lengthSquared () ) == false );
	*this = *this / this->length ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     単位ベクトルにする
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Vec2T<T>::setUnit () {
	this->setNormal ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     単位ベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::normal () const {
	assert ( Math::IsZero ( this->lengthSquared () ) == false );
	return *this / this->length ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     単位ベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::unit () const {
	return this->normal();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     反転ベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::negate() const {
	return Vec2T { -this->x, -this->y };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     逆数ベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::inverse() const {
	assert ( Math::IsZero ( this->x ) == false && Math::IsZero ( this->y ) == false );
	return Vec2T { T ( 1.0 ) / this->x, T ( 1.0 ) / this->y };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    反射ベクトルを返す
//!	    @brief	反射ベクトルを返す
//!		@param[in] normal 反射面の法線
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::reflect( const Vec2T& normal ) const {
	Vec2T temp = normal * T ( 2.0 ) * this->dot ( normal );
	return *this - temp;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     内積を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T Vec2T<T>::dot( const Vec2T& other ) const {
	return this->x * other.x + this->y * other.y ;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     外積を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T Vec2T<T>::cross( const Vec2T& other ) const {
	return this->x * other.y - this->y * other.x;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2つの単位ベクトルの間の角度を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T Vec2T<T>::normalAngleTo( const Vec2T& other ) const {
	T acosAngle = Math::Clamp ( this->dot ( other ), T( -1.0 ), T( 1.0 ) );
	return std::acos ( acosAngle );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2つの単位ベクトルの間の角度を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T Vec2T<T>::unitsAngleTo ( const Vec2T& other ) const {
	return this->normalAngleTo ( other );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2つのベクトルの間の角度を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T Vec2T<T>::angleTo( const Vec2T& other ) const {
	return this->normal ().normalAngleTo ( other.normal () );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2つのベクトルの距離を返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T Vec2T<T>::distanceTo( const Vec2T& other ) const {
	return ( *this - other ).length ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2つのベクトルの距離が指定した値未満の場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Vec2T<T>::distanceLessThan( const Vec2T& other, T dist ) const {
	Vec2T offset = ( *this - other ) / dist;
	return offset.lengthSquared () < T( 1.0 );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Vecへ変換する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
VecT<T> Vec2T<T>::toVec () const {
	return VecT<T> { this->x, this->y };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Type配列へ変換する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
std::vector<T> Vec2T<T>::toTypeArray () const {
	return std::vector<T> { this->x, this->y };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     デバッグ用の文字列にする　"データ型：[ 値 ]"
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
String Vec2T<T>::toString ( const String title ) const {
	String t = title;
	if ( title.length () != 0 ) { t += " : "; }
	return t + "Vec2:[" + std::to_string ( this->x ) + ", " + std::to_string ( this->y ) + "]";
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2つのベクトルの値が全く同じ場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Vec2T<T>::equal ( const Vec2T& other ) const {
	return ( this->x == other.x ) && ( this->y == other.y );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2つのベクトルの値が誤差範囲内で同じ場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Vec2T<T>::almostEqual ( const Vec2T& other, T tolerance ) const {
	return	( std::abs ( this->x - other.x ) < tolerance ) && ( std::abs ( this->y - other.y ) < tolerance );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    2つのベクトルが完全に並行の場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Vec2T<T>::parallel ( const Vec2T& other ) const {
	Vec2T v0 = this->normal ();
	Vec2T v1 = other.normal ();

	T dot = v0.dot ( v1 );
	return dot == T ( -1.0 ) || T ( 1.0 ) == dot;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2つのベクトルが誤差範囲内で並行の場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Vec2T<T>::almostParallel ( const Vec2T& other, T tolerance ) const {
	Vec2T v0 = this->normal ();
	Vec2T v1 = other.normal ();
	T dot = v0.dot ( v1 );
	return dot < T ( -1.0 ) + tolerance || T ( 1.0 ) - tolerance < dot;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     .x,yへ[0~1]としてアクセスする
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T& Vec2T<T>::operator[]( u8 id ) {
	assert ( id < 2 );
	switch ( id ) {
	case 0:
		return this->x;
		break;
	case 1:
		return this->y;
		break;
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
const T& Vec2T<T>::operator[]( u8 id ) const {
	assert ( id < 2 );
	switch ( id ) {
	case 0:
		return this->x;
		break;
	case 1:
		return this->y;
		break;
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Vec2T<T>::operator==( const Vec2T& other ) const {
	return this->x == other.x && this->y == other.y;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Vec2T<T>::operator !=( const Vec2T& other ) const {
	return this->x != other.x || this->y != other.y;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::operator+( const Vec2T& other ) const {
	return Vec2T { this->x + other.x, this->y + other.y };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Vec2T<T>::operator+=( const Vec2T& other ) {
	*this = *this + other;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::operator -( const Vec2T& other ) const {
	return Vec2T { this->x - other.x, this->y - other.y };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Vec2T<T>::operator -=( const Vec2T& other ) {
	*this = *this - other;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::operator*( const Vec2T& other ) const {
	return Vec2T { this->x * other.x, this->y * other.y };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::operator*( T val ) const {
	return *this * Vec2T { val };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Vec2T<T>::operator*=( T val ) {
	*this = *this * val;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Vec2T<T>::operator*=( const Vec2T& other ) {
	*this = *this * other;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::operator/( const Vec2T& other ) const {
	return Vec2T { this->x / other.x, this->y / other.y };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec2T<T> Vec2T<T>::operator/( T val ) const {
	return *this / Vec2T { val };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Vec2T<T>::operator/=( const Vec2T& other ) {
	*this = *this / other;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Vec2T<T>::operator/=( T val ) {
	*this = *this / Vec2T { val };
}
