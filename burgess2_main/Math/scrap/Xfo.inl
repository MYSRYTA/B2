
//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     デフォルトコンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT () {
	this->setIdentity ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT ( const Vec3T<T> &_tr )
	: sc { Vec3T<T> { T ( 1.0 ) } }
	, ori{ QuatT<T> {} }
	, tr { _tr } 
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT ( const QuatT<T> &_ori )
	: sc { Vec3T<T> { T ( 1.0 ) } }
	, ori{ _ori }
	, tr { Vec3T<T> { T ( 0.0 ) } } 
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT ( const Deg3T<T> &euler )
	: sc { Vec3T<T> ( T ( 1.0 ) ) }
	, ori{ QuatT<T> { euler } }
	, tr { Vec3T<T> ( T ( 0.0 ) ) } 
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT ( const Rad3T<T> &euler )
	: sc { Vec3T<T> ( T ( 1.0 ) ) }
	, ori{ QuatT<T> { euler } }
	, tr { Vec3T<T> ( T ( 0.0 ) ) } 
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT ( const Vec3T<T> &_sc, const QuatT<T> &_ori, const Vec3T<T> &_tr)
	: sc { _sc }
	, ori{ _ori }
	, tr { _tr } 
{}


//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT ( const Vec3T<T> &_sc, const Deg3T<T> &euler, const Vec3T<T> &_tr) 
	: sc { _sc }
	, ori{ QuatT<T> { euler } }
	, tr { _tr }
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT ( const Vec3T<T> &_sc, const Rad3T<T> &euler, const Vec3T<T> &_tr)
	: sc { _sc }
	, ori{ QuatT<T> { euler } }
	, tr { _tr } 
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT ( const Mat4T<T> &mat4 ) {
	*this = mat4.toXfo ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT ( const Mat3T<T> &mat3 ) {
	this->ori.setFromMat3 (mat3);
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     コンストラクタ
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT ( const SRTT<T> &srt ){
	this->sc = srt.sc;
	this->ori ( srt.rot );
	this->tr = srt.tr;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    初期値（ sc= 1,1,1 ori=0,0,0,1 tr=0,0,0） にする 
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void XfoT<T>::setIdentity (){
	this->sc = Vec3T<T> { T ( 1.0 ) };
	this->ori.setIdentity ();
	this->tr = Vec3T<T> { T ( 0.0 ) };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Mat4型へ変換する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Mat4T<T> XfoT<T>::toMat4 () const{
	Mat4T<T> sc;
	sc.setDiagonal ( Vec4T<T> { this->sc.x, this->sc.y, this->sc.z, T ( 1.0 ) } );

	Mat3T<T> rotM3 = this->ori.toMat3();
	Mat4T<T> rot { rotM3 };

	Mat4T<T> tr;
	tr.setTranslation ( this->tr );

	return tr * rot * sc;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     デバッグ用の文字列にする　"データ型：[ 値 ]"
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
String XfoT<T>::toString ( const String title ) const {
	String t = title;
	if ( title.length () != 0 ) { t += " : "; }
	String s = "sc Vec3[" + GetFloorString ( this->sc.x ) + ", " + GetFloorString ( this->sc.y ) + ", " + GetFloorString ( this->sc.z ) + "]";
	String r = "rot Quat["+ GetFloorString ( this->ori.v.x ) + ", " + GetFloorString ( this->ori.v.y ) + ", " + GetFloorString ( this->ori.v.z ) + ", " + GetFloorString ( this->ori.w ) + "]";
	String tt = "tr Vec3[" + GetFloorString ( this->tr.x ) + ", " + GetFloorString ( this->tr.y ) + ", " + GetFloorString ( this->tr.z ) + "]";
	return t + "Xfo:[" + s + " / " + r + " / " + tt + "]";
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	      2つのXfoの値が全く同じ場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool XfoT<T>::equal ( const XfoT &other ) const{
	return
		this->sc == other.sc &&
		this->ori == other.ori &&
		this->tr == other.tr;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	      2つのXfoの値が誤差範囲内で同じ場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool XfoT<T>::almostEqual ( const XfoT &other, T tolerance ) const{
	return
		this->sc.almostEqual ( other.sc, tolerance ) &&
		this->ori.almostEqual ( other.ori, tolerance ) &&
		this->tr.almostEqual ( other.tr, tolerance );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Xfo各要素を逆数にしたものを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> XfoT<T>::inverse () const{
	XfoT<T> result = *this;
	result.sc.setInverse ();
	result.ori.setInverse ();
	result.tr = result.ori.rotatVector ( this->tr.negate () * result.sc );
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Xfo各要素を逆数にする
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void XfoT<T>::setInverse () {
	*this = this->inverse ();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	      t値(0.0~1.0)に基づいて対象Xfoと線形補間したXfoを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> XfoT<T>::lerp ( const XfoT &other, T t ) const {
	XfoT<T> result;
	result.sc = this->sc.linearInterpolate ( other.sc, t );
	result.ori = this->ori.linearInterpolate ( other.ori, t );
	result.tr = this->tr.linearInterpolate ( other.tr, t );
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     t値(0.0~1.0)に基づいて対象Xfoと線形補間したXfoを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> XfoT<T>::linearInterpolate ( const XfoT &other, T t ) const {
	return this->lerp ( other, t );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     t値(0.0~1.0)に基づいて対象Xfoと回転を球状補間、位置とスケールを線形補間したXfoを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> XfoT<T>::slerp ( const XfoT &other, T t ) const {
	XfoT<T> result;
	result.sc = this->sc.lerp ( other.sc, t );
	result.ori = this->ori.slerp ( other.ori, t );
	result.tr = this->tr.lerp ( other.tr, t );
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	       t値(0.0~1.0)に基づいて対象Xfoと回転を球状補間、位置とスケールを線形補間したXfoを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> XfoT<T>::sphericalLinearInterpolate ( const XfoT &other, T t ) const {
	return this->slerp ( other, t );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     移動値を加算する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void XfoT<T>::addTr ( const Vec3T<T> &val ){
	this->tr += val;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     回転値(Quat)を加算する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void XfoT<T>::addRot ( const QuatT<T> &val ) {
	this->ori += val;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     回転値(Deg3)を加算する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void XfoT<T>::addRot ( const Deg3T<T> &val ) {
	this->ori += val;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     回転値(Rad3)を加算する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void XfoT<T>::addRot ( const Rad3T<T> &val ) {
	this->ori += val;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     スケール値を加算する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void XfoT<T>::addSc ( const Vec3T<T> &val ) {
	this->sc += val;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Xfoでトランスフォームしたベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec3T<T> XfoT<T>::transformVector ( const Vec3T<T> &val ) const{
	return this->ori.rotatVector(val * this->sc) + this->tr;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool XfoT<T>::operator == ( const XfoT &other ) const {
	return
		this->sc == other.sc &&
		this->ori == other.ori &&
		this->tr == other.tr;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool XfoT<T>::operator != ( const XfoT &other ) const {
	return
		this->sc != other.sc ||
		this->ori != other.ori ||
		this->tr != other.tr;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> XfoT<T>::operator * ( const XfoT &other ) const {
	QuatT<T> thisRot = this->ori.unit ();
	XfoT<T> result;
	result.tr = this->tr + thisRot.rotatVector ( other.tr * this->sc );
	result.ori = (thisRot *  other.ori.unit ()).unit ();
	result.sc = this->sc * other.sc;
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void XfoT<T>::operator *= ( const XfoT &other ) {
	*this = *this * other;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec3T<T> XfoT<T>::operator * ( const Vec3T<T> &vec ) const {
	return  this->ori.rotatVector ( vec *  this->sc ) + this->tr;
}