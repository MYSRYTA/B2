namespace Math {
	//------------------------------------------------------------------------------------------------------------------------------------------------
	//!	ランダム関数の基底値を生成する関数
	//------------------------------------------------------------------------------------------------------------------------------------------------
	u32 RandomRollU32 ( u32 seed ) {
		return  1664525 * seed + 1013904223;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------
	//!	指定範囲の乱数をu32型で得る
	//------------------------------------------------------------------------------------------------------------------------------------------------
	s32 RandomS32 ( u32 seed, u32 index, s32 min, s32 max ) {
		u32 power = RandomRollU32 ( seed * index ) >> 8;
		f32 rate = ( f32 ( power ) / 0x00ffffff );
		return s32 ( ( f32 ( min ) * rate ) + ( f32 ( max ) * ( 1.0f - rate ) ) );
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------
	//!	指定範囲の乱数をu32型の配列で得る
	//------------------------------------------------------------------------------------------------------------------------------------------------
	std::vector<s32> RandomS32Array ( u32 count, u32 seed, u32 index, u32 shift, s32 min, s32 max ) {
		std::vector<s32> result ( count );
		for ( u32 i = 0; i<count; i++ ) {
			result [i] = RandomS32 ( seed * ( i+1 ), index * shift * ( i + 2 ), min, max );
		}
		return result;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------
	//!	指定範囲の乱数を得る
	//------------------------------------------------------------------------------------------------------------------------------------------------
	template<typename T>
	T RandomT ( u32 seed, u32 index, T min, T max ) {
		u32 power = RandomRollU32 ( seed * index ) >> 8;

		T rate = ( T ( power ) / 0x00ffffff );

		return  ( min * rate ) + ( max * ( 1.0f - rate ) );
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------
	//!	指定範囲の乱数を配列で得る
	//------------------------------------------------------------------------------------------------------------------------------------------------
	template<typename T>
	std::vector<T> RandomTArray ( u32 count, u32 seed, u32 index, u32 shift, T min, T max ) {
		std::vector<T> result ( count );
		for ( u32 i = 0; i<count; i++ ) {
			result [i] = RandomT ( seed * ( i+1 ), index * shift * ( i+2 ), min, max );
		}
		return result;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------
	//!	指定範囲の乱数でVec3型を生成する
	//------------------------------------------------------------------------------------------------------------------------------------------------
	template<typename T>
	Vec3T<T> RandomVec3 ( u32 seed, u32 index, T min, T max ) {
		return Vec3T<T> {
			RandomT ( seed, index, min, max ),
			RandomT ( seed, index + 15, min, max ),
			RandomT ( seed, index + 48, min, max )
		};
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------
	//!	指定範囲の乱数でVec3型の配列を生成する
	//------------------------------------------------------------------------------------------------------------------------------------------------
	template<typename T>
	std::vector<Vec3T<T>> RandomVec3Array ( u32 count, u32 seed, u32 index, u32 shift, T min, T max ) {
		std::vector<Vec3T<T>> result ( count );
		for ( u32 i = 0; i<count; i++ ) {
			result [i] = RandomVec3 ( seed * ( i+1 ), index * shift * ( i+2 ), min, max );
		}
		return result;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------
	//!	指定範囲の乱数でQuat型を生成する
	//------------------------------------------------------------------------------------------------------------------------------------------------
	template<typename T>
	QuatT<T> RandomQuat ( u32 seed, u32 index, T min, T max ) {
		QuatT<T> result;
		result.v.x = RandomT ( seed, index, -1, 1 );
		result.v.y = RandomT ( seed, index + 15, -1, 1 );
		result.v.z = RandomT ( seed, index + 24, -1, 1 );
		result.w = RandomT ( seed, index + 8, min, max );
		result.setUnit ();
		return result;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------
	//!	指定範囲の乱数でQuat型の配列を生成する
	//------------------------------------------------------------------------------------------------------------------------------------------------
	template<typename T>
	std::vector<QuatT<T>> RandomQuatArray ( u32 count, u32 seed, u32 index, u32 shift, T min, T max ) {
		std::vector<QuatT<T>> result ( count );
		for ( u32 i = 0; i<count; i++ ) {
			result [i] = RandomQuat ( seed * ( i+1 ), index * shift * ( i+2 ), min, max );
		}
		return result;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------
	//!	指定範囲の乱数でDeg3型を生成する
	//------------------------------------------------------------------------------------------------------------------------------------------------
	template<typename T>
	static Deg3T<T> RandomDeg3 ( u32 seed, u32 index, T min, T max ) {
		Deg3T<T> result;
		result.x = RandomT ( seed, index, min, max );
		result.y = RandomT ( seed, index+15, min, max );
		result.z = RandomT ( seed, index+24, min, max );
		return result;
	}

	//------------------------------------------------------------------------------------------------------------------------------------------------
	//!	指定範囲の乱数でDeg3型の配列を生成する
	//------------------------------------------------------------------------------------------------------------------------------------------------
	template<typename T>
	static std::vector<Deg3T<T>> RandomDeg3Array ( u32 count, u32 seed, u32 index, u32 shift, T min, T max ) {
		std::vector<QuatT<T>> result ( count );
		for ( u32 i = 0; i < count; i++ ) {
			result[i] = RandomDeg3 ( seed * ( i + 1 ), index * shift * ( i + 2 ), min, max );
		}
		return result;
	}
}

