//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T>::Deg3T() : Eigen::Vector<T, 3>{ Eigen::Vector<T, 3>::Zero( 3 ) }
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T>::Deg3T( T val, BURGESS2::RotationOrder order ) 
	: Eigen::Vector<T, 3>{ Eigen::Vector<T, 3>::Constant( val ) }
	, rotationOrder{ order }
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T>::Deg3T( T _x, T _y, T _z, BURGESS2::RotationOrder order )
	: Eigen::Vector<T, 3>{ _x, _y, _z }
	, rotationOrder{ order }
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T>::Deg3T( const std::vector<T>& arrayVal, BURGESS2::RotationOrder order ){
	if ( arrayVal.size() < 3 ){ 
		*this = Eigen::Vector<T, 3>::Zero( 3 ); 
	} else{
		*this = { arrayVal[0], arrayVal[1], arrayVal[2], order };
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T>::Deg3T( const VecT<T>& vec, BURGESS2::RotationOrder order ){
	if ( vec.size() < 3 ){ 
		*this = Eigen::Vector<T, 3>::Zero( 3 ); 
	} else{
		*this = { vec[0], vec[1], vec[2], order };
	}
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T>::Deg3T( const Vec3T<T>& vec, BURGESS2::RotationOrder order )
	: Eigen::Vector<T, 3>{ vec[0], vec[1], vec[2] }
	, rotationOrder{ order }
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T>::Deg3T( const QuatT<T>& quat, BURGESS2::RotationOrder order ){
	*this = quat.toDeg3( order );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T>::Deg3T( const Mat3T<T>& mat3, BURGESS2::RotationOrder order ){
	this->setFromMat3( mat3.getRotationMat3(), order );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T>::Deg3T( const Mat4T<T>& mat4, BURGESS2::RotationOrder order ){
	this->setFromMat3( mat4.getRotationMat3(), order );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T>::Deg3T( const Rad3T<T>& rad )
	: Eigen::Vector<T, 3>{ Burgess2MathFn::RadToDeg( rad.x() ), Burgess2MathFn::RadToDeg( rad.y() ), Burgess2MathFn::RadToDeg( rad.z() ) }
	, rotationOrder { rad.getRotationOrder() }
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T>::Deg3T( const Eigen::Vector<T, 3>& other ){
	this->Eigen::Vector<T, 3>::operator=( other );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T& Deg3T<T>::x(){
	return this->Eigen::Vector<T, 3>::x();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
const T& Deg3T<T>::x()const{
	return this->Eigen::Vector<T, 3>::x();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T& Deg3T<T>::y(){
	return this->Eigen::Vector<T, 3>::y();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
const T& Deg3T<T>::y()const{
	return this->Eigen::Vector<T, 3>::y();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T& Deg3T<T>::z(){
	return this->Eigen::Vector<T, 3>::z();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
const T& Deg3T<T>::z()const{
	return this->Eigen::Vector<T, 3>::z();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Vecへ変換する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
VecT<T> Deg3T<T>::toVec()const{
	std::vector<T> v{ this->x(), this->y(), this->z() };
	return VecT<T> { v };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Typeの配列へ変換する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
std::vector<T> Deg3T<T>::toTypeArray() const{
	return std::vector<T> { this->x(), this->y(), this->z() };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Deg3へ変換する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Rad3T<T> Deg3T<T>::toRad3() const{
	return Rad3T<T> { Burgess2MathFn::DegToRad( this->x() ), Burgess2MathFn::DegToRad( this->y() ), Burgess2MathFn::DegToRad( this->z() ), this->getRotationOrder() };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Quatへ変換する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
QuatT<T> Deg3T<T>::toQuat() const{
	return QuatT<T> { *this };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Mat3へ変換する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Mat3T<T> Deg3T<T>::toMat3() const{
	return QuatT<T> { *this }.toMat3();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     デバッグ用の文字列にする　"データ型：[ 値 ]"
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
String Deg3T<T>::toString( const String title ) const{
	String t = title;
	if ( title.length() != 0 ){ t += " : "; }
	String order = "";
	switch ( static_cast<u8>(this->rotationOrder) ){
		case 0://XYZ:
			order += "[XYZ]";
			break;
		case 1://YZX:
			order += "[YZX]";
			break;
		case 2://ZXY:
			order += "[ZXY]";
			break;
		case 3://XZY:
			order += "[XZY]";
			break;
		case 4://YXZ:
			order += "[YXZ]";
			break;
		case 5://ZYX:
			order += "[ZYX]";
			break;
	}
	return t + "Deg3:[" +
		GetFloorString( this->x() ) + ", " +
		GetFloorString( this->y() ) + ", " +
		GetFloorString( this->z() ) + ", rotationOrder : " + order + "]";
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2つのデグリー単位オイラーの値が全く同じ場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Deg3T<T>::equal( const Deg3T& other ) const{
	return this->Eigen::Vector<T, 3>::operator==( other ) && this->rotationOrder == other.rotationOrder;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2つのデグリー単位オイラーの値が誤差範囲内で同じ場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Deg3T<T>::almostEqual( const Deg3T& other, T tolerance ) const{
	return
		Burgess2MathFn::AlmostEqual( this->x(), other.x(), tolerance ) &&
		Burgess2MathFn::AlmostEqual( this->y(), other.y(), tolerance ) &&
		Burgess2MathFn::AlmostEqual( this->z(), other.z(), tolerance ) &&
		this->rotationOrder == other.rotationOrder;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Mat3からDeg3を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Deg3T<T>::setFromMat3( const Mat3T<T>& mat3, BURGESS2::RotationOrder order ){
	*this = QuatT<T>( mat3 ).toDeg3( order );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     QuatからDeg3を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Deg3T<T>::setFromQuat( const QuatT<T>& quat, BURGESS2::RotationOrder order ){
	*this = quat.toDeg3( order );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Rad3からDeg3を設定する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Deg3T<T>::setFromRad3( const Rad3T<T>& rad ){
	this->x() = Burgess2MathFn::RadToDeg( rad.x() );
	this->y() = Burgess2MathFn::RadToDeg( rad.y() );
	this->z() = Burgess2MathFn::RadToDeg( rad.z() );
	this->rotationOrder = rad.getRotationOrder();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     ローテーションオーダーを取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
BURGESS2::RotationOrder Deg3T<T>::getRotationOrder() const{
	return this->rotationOrder;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     ローテーションオーダーをu8で取得する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
u8 Deg3T<T>::getRotationOrderU8() const{
	return static_cast<u8>( this->rotationOrder );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     ベクトルをこのラジアンで回転したベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec3T<T> Deg3T<T>::rotatVector( const Vec3T<T>& vec3 ) const{
	return QuatT<T>{*this}.rotatVector( vec3 );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T>& Deg3T<T>::operator = ( const Eigen::Vector<T, 3>& other ){
	this->Eigen::Vector<T, 3>::operator=( other );
	return *this;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
T& Deg3T<T>::operator[]( u8 id ){
	return this->Eigen::Vector<T, 3>::operator[]( id );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
const T& Deg3T<T>::operator[]( u8 id )const{
	return this->Eigen::Vector<T, 3>::operator[]( id );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Deg3T<T>::operator == ( const Deg3T& other ) const{
	return this->Eigen::Vector<T, 3>::operator==( other ) && this->rotationOrder == other.rotationOrder;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool Deg3T<T>::operator != ( const Deg3T& other ) const{
	return this->Eigen::Vector<T, 3>::operator!=( other ) || this->rotationOrder != other.rotationOrder;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T> Deg3T<T>::operator+( const Deg3T& other )const{
	return Deg3T{ this->Eigen::Vector<T, 3>::operator+( other ) };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Deg3T<T>::operator+=( const Deg3T& other ){
	this->Eigen::Vector<T, 3>::operator+=( other );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Deg3T<T> Deg3T<T>::operator-( const Deg3T& other )const{
	return Deg3T<T>{ this->Eigen::Vector<T, 3>::operator-( other ) };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void Deg3T<T>::operator-=( const Deg3T& other ){
	this->Eigen::Vector<T, 3>::operator-=( other );
}
