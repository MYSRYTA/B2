//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT( const Vec3T<T>& _tr )
	: sc( Vec3T<T>::Ones(3) ), ori(QuatT<T>::Identity()), tr( _tr )
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT( const QuatT<T> & _ori )
	: sc( Vec3T<T>::Ones(3) ), ori( _ori ), tr( Vec3T<T>::Zero(3) )
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT( const Deg3T<T> & _ori )
	: sc( Vec3T<T>::Ones(3) ), ori( QuatT<T>{_ori} ), tr( Vec3T<T>::Zero(3) )
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT( const Rad3T<T> & _ori )
	: sc( Vec3T<T>::Ones(3) ), ori( QuatT<T>{_ori} ), tr( Vec3T<T>::Zero(3) )
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT( const Mat4T<T> & mat ){
	*this = mat.toXfo();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT( const Mat3T<T> & mat )
	: sc( mat.getScaling() ), ori( mat.getRotationMat3() ), tr( Vec3T<T>::Zero(3) )
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT( const SRTT<T> & srt )
	: sc( srt.sc ), ori( srt.rot ), tr( srt.tr ){}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT( const Vec3T<T> & _sc, const QuatT<T> & _ori, const Vec3T<T> & _tr )	
	: sc(_sc), ori(_ori), tr(_tr)
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT( const Vec3T<T> & _sc, const Deg3T<T> & _ori, const Vec3T<T> & _tr ) 
	: sc( _sc ), ori( QuatT<T>{_ori} ), tr( _tr )
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T>::XfoT( const Vec3T<T> & _sc, const Rad3T<T> & _ori, const Vec3T<T>& _tr ) 
	: sc( _sc ), ori( QuatT<T>{_ori} ), tr( _tr )
{}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	    初期値（ sc= 1,1,1 ori=0,0,0,1 tr=0,0,0） にする 
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void XfoT<T>::setIdentity(){
	this->sc = Vec3T<T>::Ones(3);
	this->ori = QuatT<T>::Identity();
	this->tr = Vec3T<T>::Zero(3);
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Mat4型へ変換する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Mat4T<T> XfoT<T>::toMat4() const{
	Mat4T<T> _sc;
	_sc.setDiagonal( Vec4T<T> { this->sc.x(), this->sc.y(), this->sc.z(), T( 1.0 ) } );

	Mat4T<T> _rot;
	_rot.setUpperLeft( this->ori.toMat3() );
	
	Mat4T<T> _tr;
	_tr.setTranslation( this->tr );

	return _tr * _rot * _sc;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     SRT型へ変換する
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
SRTT<T> XfoT<T>::toSRT() const{
	return SRTT<T> {this->sc, Deg3T<T>{this->ori}, this->tr};
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     デバッグ用の文字列にする　"データ型：[ 値 ]"
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
String XfoT<T>::toString( const String title )const{
	String t = title;
	if(title.length() != 0) { t += " : "; }
	String s = "sc Vec3[" + GetFloorString( this->sc.x() ) + ", " + GetFloorString( this->sc.y() ) + ", " + GetFloorString( this->sc.z() ) + "]";
	String r = "ori Quat[" + GetFloorString( this->ori.x() ) + ", " + GetFloorString( this->ori.y() ) + ", " + GetFloorString( this->ori.z() ) + ", " + GetFloorString( this->ori.w() ) + "]";
	String tt = "tr Vec3[" + GetFloorString( this->tr.x() ) + ", " + GetFloorString( this->tr.y() ) + ", " + GetFloorString( this->tr.z() ) + "]";
	return t + "Xfo:[" + s + " / " + r + " / " + tt + "]";
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2つのトランスフォームの値が全く同じ場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool XfoT<T>::equal( const XfoT<T>& other ) const{
	return this->sc == other.sc && this->ori == other.ori && this->tr == other.tr;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     2つのトランスフォームの値が誤差範囲内で同じ場合はtrueを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool XfoT<T>::almostEqual( const XfoT<T>& other, T tolerance ) const{
	return	this->sc.almostEqual( other.sc, tolerance ) &&
			this->ori.almostEqual( other.ori, tolerance ) &&
			this->tr.almostEqual( other.tr, tolerance );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     t値(0.0~1.0)に基づいて対象Xfoと線形補間したXfoを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> XfoT<T>::lerp( const XfoT& other, T t ) const{
	return XfoT<T>{this->sc.lerp( other.sc, t ), this->ori.lerp( other.ori, t ), this->tr.lerp( other.tr, t )};
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	      t値(0.0~1.0)に基づいて対象Xfoと線形補間したXfoを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> XfoT<T>::linearInterpolate( const XfoT& other, T t ) const{
	return this->lerp( other, t );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     t値(0.0~1.0)に基づいて対象Xfoと補間（回転＝球状補間、位置とスケール＝線形補間）したXfoを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> XfoT<T>::slerp( const XfoT & other, T t ) const{
	return XfoT<T>{this->sc.lerp( other.sc, t ), this->ori.slerp( other.ori, t ), this->tr.lerp( other.tr, t )};
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	      t値(0.0~1.0)に基づいて対象Xfoと補間（回転＝球状補間、位置とスケール＝線形補間）したXfoを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> XfoT<T>::sphericalLinearInterpolate( const XfoT & other, T t ) const{
	return this->slerp( other, t );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     各要素を逆数にしたXfoを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> XfoT<T>::inverse() const{
	XfoT<T> result = *this;
	result.sc.setInverse();
	result.ori.setInverse();
	result.tr = result.ori.rotatVector( this->tr.negate() * result.sc );
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     各要素を逆数にする
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void XfoT<T>::setInverse(){
	*this = this->toMat4().inverse();
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     Xfoでトランスフォームしたベクトルを返す
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec3T<T> XfoT<T>::transformVector( const Vec3T<T> & val ) const{
	return this->ori.rotatVector( val * this->sc ) + this->tr;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool XfoT<T>::operator==( const XfoT<T> & other ) const{
	return this->sc == other.sc && this->ori == other.ori && this->tr == other.tr;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Bool XfoT<T>::operator !=( const XfoT<T> & other ) const{
	return this->sc != other.sc || this->ori != other.ori || this->tr != other.tr;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
XfoT<T> XfoT<T>::operator*( const XfoT & other ) const{
	QuatT<T> thisRot = this->ori.unit();
	XfoT<T> result;
	result.tr = this->tr + thisRot.rotatVector( other.tr * this->sc );
	result.ori = ( thisRot * other.ori.unit() ).unit();
	result.sc = this->sc * other.sc;
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
void XfoT<T>::operator*=( const XfoT & other ){
	*this = *this * other;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!	     
//------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T>
Vec3T<T> XfoT<T>::operator*( const Vec3T<T> & vec ) const{
	return  this->transformVector( vec );
}
