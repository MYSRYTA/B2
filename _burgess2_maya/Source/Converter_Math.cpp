#include "Converter.h"

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
String Convert ( const MString &maya ) {
	const char* cStr = "";
	cStr = maya.asChar ();
	return String ( cStr );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MString Convert ( const String &str ) {
	const char* cStr = str.c_str();
	return MString ( cStr );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
Mat4 Convert ( const MMatrix &maya ) {
	return Mat4{	f32( maya( 0,0 ) ), f32( maya( 1,0 ) ), f32( maya( 2,0 ) ), f32( maya( 3,0 ) ),
					f32( maya( 0,1 ) ), f32( maya( 1,1 ) ), f32( maya( 2,1 ) ), f32( maya( 3,1 ) ),
					f32( maya( 0,2 ) ), f32( maya( 1,2 ) ), f32( maya( 2,2 ) ), f32( maya( 3,2 ) ),
					f32( maya( 0,3 ) ), f32( maya( 1,3 ) ), f32( maya( 2,3 ) ), f32( maya( 3,3 ) ) };

}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MMatrix Convert ( const Mat4 &mat4 ) {
	f32 m44Val[4][4] = {
		{ mat4( 0,0 ), mat4( 1,0 ), mat4( 2,0 ), mat4( 3,0 ) },
		{ mat4( 0,1 ), mat4( 1,1 ), mat4( 2,1 ), mat4( 3,1 ) },
		{ mat4( 0,2 ), mat4( 1,2 ), mat4( 2,2 ), mat4( 3,2 ) },
		{ mat4( 0,3 ), mat4( 1,3 ), mat4( 2,3 ), mat4( 3,3 ) }
	};
	return MMatrix ( m44Val );
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
Vec3 Convert ( const MVector &maya ) {
	return Vec3 { f32( maya.x), f32( maya.y), f32( maya.z) };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
Vec3 Convert ( const MPoint &maya ) {
	return Vec3 { f32 ( maya.x ), f32 ( maya.y ), f32 ( maya.z ) };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
Vec3 Convert ( const MFloatVector &maya ) {
	return Vec3 { f32 ( maya.x ), f32 ( maya.y ), f32 ( maya.z ) };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
Rad3 Convert ( const MEulerRotation &maya ) {
	return Rad3{ f32 ( maya.x ), f32 ( maya.y ), f32 ( maya.z ) };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
std::vector<Vec3> Convert ( const MVectorArray &maya ) {
	s32 len = s32(maya.length());
	std::vector<Vec3> result ( len );
	#pragma omp parallel for if(1000 < len)
		for ( s32 i = 0; i < len; ++i ) {
			result [i] = Convert ( maya [i] );
		}
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
std::vector<Vec3> Convert ( const MPointArray &maya ) {
	s32 len = s32( maya.length() );
	std::vector<Vec3> result ( len );
	#pragma omp parallel for if(1000 < len)
		for ( s32 i = 0; i < len; ++i ) {
			result [i] = Convert ( maya [i] );
		}
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
std::vector<Vec3> Convert ( const MFloatVectorArray  &maya ) {
	s32 len = s32( maya.length() );
	std::vector<Vec3> result ( len );
	#pragma omp parallel for if(1000 < len)
		for ( s32 i = 0; i < len; ++i ) {
			result [i] = Convert ( maya [i] );
		}
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
std::vector<Vec4> Convert ( const MColorArray  &maya ){
	s32 len = s32( maya.length() );
	std::vector<Vec4> result ( len );
	#pragma omp parallel for if(1000 < len)
	for ( s32 i = 0; i < len; ++i ){
		result[i] = Convert ( maya[i] );
	}
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MVector Convert ( const Vec3 &vec3 ) {
	return MVector { vec3.x(), vec3.y(), vec3.z() };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MVector ConvertMVector ( const Vec3 &vec3 ) {
	return MVector { vec3.x(), vec3.y(), vec3.z() };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MPoint ConvertMPoint ( const Vec3 &vec3 ) {
	return MPoint { vec3.x(), vec3.y(), vec3.z() };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MFloatVector ConvertMFloatVector ( const Vec3 &vec3 ) {
	return MFloatVector { vec3.x(), vec3.y(), vec3.z() };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MEulerRotation Convert ( const Rad3 &bgs ) {
	return MEulerRotation{ f64( bgs.x() ), f64( bgs.y() ), f64( bgs.z() ) };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MEulerRotation Convert ( const Rad3d &bgs ){
	return MEulerRotation{ f64 ( bgs.x() ), f64 ( bgs.y() ), f64 ( bgs.z() ) };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MColor Convert ( const Vec4 &vec4 ){
	return MColor{ vec4.x(), vec4.y(), vec4.z(), vec4.t() };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
Vec4 Convert ( const MColor &maya ){
	return Vec4{ maya.r, maya.g, maya.b, maya.a };
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MVectorArray  Convert ( const std::vector<Vec3>  &vec3Array ) {
	s32 cnt = s32( vec3Array.size() );
	MVectorArray result ( cnt );
	#pragma omp parallel for if(1000<cnt)
		for ( s32 i = 0; i < cnt; ++i ) {
			result [i] = Convert ( vec3Array [i] );
		}
		return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MVectorArray  ConvertMVectorArray ( const std::vector<Vec3>  &vec3Array ) {
	s32 cnt = s32( vec3Array.size() );
	MVectorArray result ( cnt );
	#pragma omp parallel for if(1000<cnt)
		for ( s32 i = 0; i < cnt; ++i ) {
			result [i] = Convert ( vec3Array [i] );
	}
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MPointArray  ConvertMPointArray ( const std::vector<Vec3>  &vec3Array ) {
	s32 cnt = s32( vec3Array.size() );
	MPointArray result ( cnt );
	#pragma omp parallel for if(1000<cnt)
		for ( s32 i = 0; i < cnt; ++i ) {
			result [i] = Convert ( vec3Array [i] );
		}
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MFloatVectorArray  ConvertMFloatVectorArray ( const std::vector<Vec3>  &vec3Array ) {
	s32 cnt = s32( vec3Array.size() );
	MFloatVectorArray result ( cnt );
	#pragma omp parallel for if(1000<cnt)
		for ( s32 i = 0; i < cnt; ++i ) {
			result [i] = Convert ( vec3Array [i] );
		}
	return result;
}

//------------------------------------------------------------------------------------------------------------------------------------------------
//!		
//------------------------------------------------------------------------------------------------------------------------------------------------
MColorArray  Convert ( const std::vector<Vec4>  &vec4Array ){
	s32 cnt = s32( vec4Array.size() );
	MColorArray result ( cnt );
	#pragma omp parallel for if(1000<cnt)
	for ( s32 i = 0; i < cnt; ++i ){
		result[i] = Convert ( vec4Array[i] );
	}
	return result;
}